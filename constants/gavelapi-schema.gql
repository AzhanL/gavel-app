"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""An enumeration."""
enum CourtCourtBranch {
  """Provincial"""
  P

  """Federal"""
  F

  """Military"""
  M

  """Supreme"""
  S

  """Unknown"""
  U
}

"""An enumeration."""
enum CourtCourtSpecialization {
  """Youth"""
  Y

  """Family"""
  F

  """Small Claims"""
  S

  """General"""
  G
}

"""An enumeration."""
enum CourtCourtType {
  """Appeal"""
  A

  """Superior"""
  S

  """General"""
  G

  """Administrative Tribunals"""
  T

  """Tax"""
  X
}

type CourtType {
  id: ID!
  name: String!
  courtBranch: CourtCourtBranch!
  courtType: CourtCourtType!
  courtSpecialization: CourtCourtSpecialization!
  locations: [LocationType!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type HearingType {
  id: ID!
  title: String!
  partyName: String!
  lawyer: String!
  dateTime: DateTime
  courtFileNumber: String!
  hearingType: String!
  room: RoomType
}

"""An enumeration."""
enum LocationProvince {
  """Alberta"""
  AB

  """British Columbia"""
  BC

  """Manitoba"""
  MB

  """New Brunswick"""
  NB

  """Newfoundland and Labrador"""
  NL

  """Northwest Territories"""
  NT

  """Nova Scotia"""
  NS

  """Nunavut"""
  NU

  """Ontario"""
  ON

  """Prince Edward Island"""
  PE

  """Quebec"""
  QC

  """Saskatchewan"""
  SK

  """Yukon"""
  YT
}

type LocationType {
  id: ID!
  name: String!
  addressLine1: String!
  addressLine2: String!
  city: String!
  province: LocationProvince!
  postalCode: String
  phoneNumber: String!
  faxNumber: String!
  operationalDays: [OperationalDaysType!]!
  locationType: String!
  courtSet: [CourtType!]!
  roomSet: [RoomType!]!
}

type Mutation {
  updateCourtInfo: UpdateCourtInfo
  updateHearings(lastDays: Int, nextDays: Int): UpdateHearings
}

type OperationalDaysType {
  id: ID!
  weekDay: OperationalDayWeekDay!
  timeSlots: [TimeSlotType!]!
  locationSet: [LocationType!]!
}

"""An enumeration."""
enum OperationalDayWeekDay {
  """Monday"""
  MO

  """Tuesday"""
  TU

  """Wednesday"""
  WE

  """Thursday"""
  TH

  """Friday"""
  FR

  """Saturday"""
  SA

  """Sundary"""
  SU
}

type Query {
  timeslots: [TimeSlotType]
  hearings(fileNumber: String, dateField: DateTime, partyName: String, title: String, count: Int): [HearingType]
  rooms: [RoomType]
  locations: [LocationType]
  operationalDays: [OperationalDaysType]
  courts(nameSearch: String, citySearch: String, provinceSearch: String): [CourtType]
}

type RoomType {
  id: ID!
  roomNumber: String!
  location: LocationType
  hearingSet: [HearingType!]!
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type TimeSlotType {
  id: ID!
  openTime: Time!
  closeTime: Time!
  operationaldaySet: [OperationalDaysType!]!
}

type UpdateCourtInfo {
  successful: Boolean
  statusMessage: String
}

type UpdateHearings {
  successful: Boolean
  statusMessage: String
}
